import emailjs from '@emailjs/browser';

// ‚ö†Ô∏è CONFIGURATION EMAILJS REQUISE ‚ö†Ô∏è
// Remplacez ces valeurs par vos vrais identifiants EmailJS
const EMAILJS_SERVICE_ID = 'YOUR_SERVICE_ID'; // Remplacez par votre Service ID
const EMAILJS_TEMPLATE_ID = 'YOUR_TEMPLATE_ID'; // Remplacez par votre Template ID  
const EMAILJS_PUBLIC_KEY = 'YOUR_PUBLIC_KEY'; // Remplacez par votre Public Key

export interface ContactFormData {
  name: string;
  email: string;
  phone: string;
  company: string;
  sector: string;
  subject: string;
  message: string;
}

export const sendContactEmail = async (formData: ContactFormData): Promise<boolean> => {
  try {
    // V√©rifier si EmailJS est configur√©
    if (EMAILJS_PUBLIC_KEY === 'YOUR_PUBLIC_KEY' || 
        EMAILJS_SERVICE_ID === 'YOUR_SERVICE_ID' || 
        EMAILJS_TEMPLATE_ID === 'YOUR_TEMPLATE_ID') {
      console.warn('‚ö†Ô∏è EmailJS non configur√©. Veuillez configurer vos identifiants dans emailService.ts');
      
      // Simuler un envoi r√©ussi en mode d√©veloppement
      console.log('üìß Simulation d\'envoi d\'email:', formData);
      return true;
    }

    // Initialiser EmailJS avec votre cl√© publique
    emailjs.init(EMAILJS_PUBLIC_KEY);

    // Pr√©parer les donn√©es pour le template
    const templateParams = {
      from_name: formData.name,
      from_email: formData.email,
      phone: formData.phone,
      company: formData.company || 'Non sp√©cifi√©e',
      sector: formData.sector || 'Non sp√©cifi√©',
      subject: formData.subject || 'Demande g√©n√©rale',
      message: formData.message,
      to_email: 'johndoeconsulting@proton.me', // Votre email de r√©ception
      reply_to: formData.email,
      // Informations suppl√©mentaires
      date: new Date().toLocaleDateString('fr-FR'),
      time: new Date().toLocaleTimeString('fr-FR')
    };

    // Envoyer l'email
    const response = await emailjs.send(
      EMAILJS_SERVICE_ID,
      EMAILJS_TEMPLATE_ID,
      templateParams
    );

    console.log('‚úÖ Email envoy√© avec succ√®s:', response);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi de l\'email:', error);
    return false;
  }
};

// Fonction pour envoyer un email de confirmation au client
export const sendConfirmationEmail = async (formData: ContactFormData): Promise<boolean> => {
  try {
    // V√©rifier si EmailJS est configur√©
    if (EMAILJS_PUBLIC_KEY === 'YOUR_PUBLIC_KEY') {
      console.log('üìß Simulation d\'email de confirmation pour:', formData.email);
      return true;
    }

    const confirmationParams = {
      to_name: formData.name,
      to_email: formData.email,
      from_name: 'John Doe Consulting',
      subject: 'Confirmation de r√©ception - John Doe Consulting',
      message: `Bonjour ${formData.name},

Merci pour votre message ! Nous avons bien re√ßu votre demande concernant "${formData.subject || 'votre projet'}".

üìã R√©capitulatif de votre demande :
‚Ä¢ Nom : ${formData.name}
‚Ä¢ Email : ${formData.email}
‚Ä¢ T√©l√©phone : ${formData.phone}
‚Ä¢ Entreprise : ${formData.company || 'Non sp√©cifi√©e'}
‚Ä¢ Secteur : ${formData.sector || 'Non sp√©cifi√©'}
‚Ä¢ Sujet : ${formData.subject || 'Demande g√©n√©rale'}

üí¨ Votre message :
${formData.message}

‚è∞ Nous vous r√©pondrons dans les plus brefs d√©lais, g√©n√©ralement sous 2h en moyenne.

Cordialement,
L'√©quipe John Doe Consulting

üìû 07 80 39 28 53
üìß johndoeconsulting@proton.me
üåê France enti√®re`
    };

    await emailjs.send(
      EMAILJS_SERVICE_ID,
      'template_confirmation', // Template de confirmation
      confirmationParams
    );

    console.log('‚úÖ Email de confirmation envoy√©');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi de l\'email de confirmation:', error);
    return false;
  }
};